type token =
  | T_bool
  | T_break
  | T_byref
  | T_char
  | T_continue
  | T_delete
  | T_double
  | T_else
  | T_for
  | T_false
  | T_if
  | T_int
  | T_new
  | T_NULL
  | T_return
  | T_true
  | T_void
  | T_eof
  | T_intconst of (int)
  | T_doubleconst of (float)
  | T_id of (string)
  | T_charconst of (char)
  | T_stringliteral of (string)
  | T_assign
  | T_eq
  | T_neq
  | T_gt
  | T_lt
  | T_ge
  | T_le
  | T_plus
  | T_minus
  | T_times
  | T_div
  | T_mod
  | T_bitand
  | T_bitnot
  | T_and
  | T_or
  | T_q
  | T_colon
  | T_comma
  | T_plusplus
  | T_minusminus
  | T_pluseq
  | T_minuseq
  | T_timeseq
  | T_diveq
  | T_modeq
  | T_semicol
  | T_lparen
  | T_rparen
  | T_lbracket
  | T_rbracket
  | T_lcurl
  | T_rcurl

open Parsing;;
let _ = parse_error;;
# 3 "bin/parser.mly"
    open Printf
    open Ast
    open Types
    let get_loc = Parsing.symbol_start_pos 

# 68 "bin/parser.ml"
let yytransl_const = [|
  257 (* T_bool *);
  258 (* T_break *);
  259 (* T_byref *);
  260 (* T_char *);
  261 (* T_continue *);
  262 (* T_delete *);
  263 (* T_double *);
  264 (* T_else *);
  265 (* T_for *);
  266 (* T_false *);
  267 (* T_if *);
  268 (* T_int *);
  269 (* T_new *);
  270 (* T_NULL *);
  271 (* T_return *);
  272 (* T_true *);
  273 (* T_void *);
  274 (* T_eof *);
  280 (* T_assign *);
  281 (* T_eq *);
  282 (* T_neq *);
  283 (* T_gt *);
  284 (* T_lt *);
  285 (* T_ge *);
  286 (* T_le *);
  287 (* T_plus *);
  288 (* T_minus *);
  289 (* T_times *);
  290 (* T_div *);
  291 (* T_mod *);
  292 (* T_bitand *);
  293 (* T_bitnot *);
  294 (* T_and *);
  295 (* T_or *);
  296 (* T_q *);
  297 (* T_colon *);
  298 (* T_comma *);
  299 (* T_plusplus *);
  300 (* T_minusminus *);
  301 (* T_pluseq *);
  302 (* T_minuseq *);
  303 (* T_timeseq *);
  304 (* T_diveq *);
  305 (* T_modeq *);
  306 (* T_semicol *);
  307 (* T_lparen *);
  308 (* T_rparen *);
  309 (* T_lbracket *);
  310 (* T_rbracket *);
  311 (* T_lcurl *);
  312 (* T_rcurl *);
    0|]

let yytransl_block = [|
  275 (* T_intconst *);
  276 (* T_doubleconst *);
  277 (* T_id *);
  278 (* T_charconst *);
  279 (* T_stringliteral *);
    0|]

let yylhs = "\255\255\
\001\000\006\000\006\000\002\000\002\000\002\000\010\000\012\000\
\012\000\014\000\014\000\007\000\004\000\016\000\016\000\015\000\
\015\000\015\000\015\000\009\000\009\000\008\000\008\000\018\000\
\018\000\017\000\017\000\019\000\019\000\020\000\020\000\005\000\
\005\000\021\000\021\000\011\000\011\000\023\000\023\000\024\000\
\024\000\022\000\022\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\026\000\026\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\027\000\027\000\027\000\027\000\027\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\029\000\029\000\029\000\029\000\030\000\
\030\000\030\000\030\000\030\000\030\000\031\000\031\000\013\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\002\000\001\000\
\004\000\001\000\003\000\003\000\002\000\000\000\002\000\001\000\
\001\000\001\000\001\000\008\000\008\000\006\000\006\000\001\000\
\003\000\000\000\001\000\002\000\003\000\000\000\001\000\001\000\
\003\000\001\000\002\000\000\000\001\000\000\000\002\000\001\000\
\002\000\001\000\001\000\007\000\001\000\002\000\003\000\010\000\
\002\000\002\000\003\000\005\000\007\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\004\000\
\004\000\001\000\001\000\001\000\001\000\004\000\005\000\003\000\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\000\000\003\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\057\000\000\000\058\000\056\000\059\000\061\000\
\000\000\060\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\105\000\000\000\000\000\066\000\067\000\
\068\000\069\000\018\000\017\000\019\000\016\000\000\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\094\000\095\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\072\000\000\000\063\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\064\000\000\000\000\000\065\000\
\103\000\000\000"

let yydgoto = "\002\000\
\020\000\000\000\021\000\031\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\024\000\025\000\026\000\070\000"

let yysindex = "\011\000\
\133\255\000\000\000\000\010\255\000\000\000\000\000\000\000\000\
\226\254\000\000\000\000\133\255\133\255\133\255\133\255\133\255\
\133\255\133\255\057\255\000\000\213\002\041\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\227\254\000\000\
\093\255\231\254\231\254\228\254\228\254\228\254\228\254\228\254\
\153\002\230\254\133\255\133\255\133\255\133\255\133\255\133\255\
\133\255\133\255\133\255\133\255\133\255\133\255\133\255\133\255\
\133\255\133\255\000\000\000\000\133\255\133\255\133\255\133\255\
\133\255\133\255\000\000\133\255\133\255\000\000\246\254\000\000\
\234\254\000\000\133\255\071\003\243\002\071\003\071\003\071\003\
\071\003\071\003\231\254\231\254\228\254\228\254\228\254\071\003\
\043\003\183\002\243\002\243\002\243\002\243\002\243\002\243\002\
\091\002\243\002\122\002\000\000\000\000\228\254\133\255\000\000\
\000\000\015\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\161\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\251\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\193\255\000\000\
\000\000\033\001\065\001\001\000\033\000\065\000\097\000\129\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\225\255\000\000\
\000\000\000\000\000\000\147\001\044\255\166\001\184\001\203\001\
\221\001\240\001\097\001\129\001\161\000\193\000\225\000\002\002\
\021\002\000\000\121\255\035\002\039\002\053\002\056\002\060\002\
\000\000\030\255\000\000\000\000\000\000\001\001\000\000\000\000\
\000\000\086\255"

let yygindex = "\000\000\
\000\000\000\000\244\255\008\000\252\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1148
let yytable = "\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\052\000\
\053\000\054\000\027\000\001\000\032\000\028\000\059\000\060\000\
\029\000\059\000\060\000\068\000\033\000\030\000\100\000\069\000\
\066\000\075\000\042\000\066\000\073\000\101\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\032\000\033\000\
\092\000\093\000\094\000\095\000\096\000\097\000\000\000\098\000\
\099\000\027\000\067\000\000\000\028\000\087\000\102\000\029\000\
\000\000\000\000\003\000\000\000\030\000\004\000\005\000\033\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\033\000\068\000\000\000\087\000\087\000\000\000\012\000\
\013\000\014\000\106\000\000\000\015\000\016\000\000\000\087\000\
\000\000\087\000\000\000\017\000\018\000\000\000\003\000\071\000\
\000\000\004\000\005\000\019\000\006\000\000\000\071\000\007\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\013\000\014\000\071\000\071\000\
\015\000\016\000\071\000\071\000\071\000\071\000\071\000\017\000\
\018\000\071\000\091\000\071\000\000\000\000\000\003\000\019\000\
\072\000\004\000\005\000\000\000\006\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\091\000\091\000\012\000\013\000\014\000\000\000\000\000\
\015\000\016\000\000\000\000\000\091\000\000\000\091\000\017\000\
\018\000\000\000\054\000\000\000\000\000\000\000\000\000\019\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\000\000\000\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\102\000\000\000\054\000\054\000\054\000\000\000\
\102\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\000\000\000\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\013\000\000\000\102\000\000\000\102\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\074\000\000\000\013\000\013\000\013\000\000\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\000\000\074\000\074\000\
\074\000\074\000\074\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\073\000\000\000\074\000\000\000\074\000\000\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\000\000\000\000\073\000\073\000\
\073\000\073\000\073\000\000\000\000\000\073\000\073\000\073\000\
\073\000\073\000\077\000\000\000\073\000\000\000\073\000\000\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\000\000\000\000\077\000\077\000\
\077\000\077\000\077\000\000\000\000\000\077\000\077\000\077\000\
\077\000\077\000\092\000\000\000\077\000\000\000\077\000\000\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\000\000\000\000\092\000\092\000\
\092\000\092\000\092\000\000\000\000\000\092\000\092\000\092\000\
\092\000\092\000\093\000\000\000\092\000\000\000\092\000\000\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\000\000\000\000\093\000\093\000\
\093\000\093\000\093\000\000\000\000\000\093\000\093\000\093\000\
\093\000\093\000\078\000\000\000\093\000\000\000\093\000\000\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\000\000\000\000\078\000\078\000\
\078\000\078\000\078\000\000\000\000\000\078\000\078\000\078\000\
\078\000\078\000\079\000\000\000\078\000\000\000\078\000\000\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\000\000\000\000\079\000\079\000\
\079\000\079\000\079\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\080\000\000\000\079\000\000\000\079\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\000\000\000\000\080\000\080\000\
\080\000\080\000\080\000\000\000\000\000\080\000\080\000\080\000\
\080\000\080\000\070\000\000\000\080\000\000\000\080\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\000\000\000\000\070\000\070\000\070\000\
\070\000\070\000\075\000\000\000\070\000\000\000\070\000\000\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\000\000\000\000\000\000\000\000\000\000\075\000\075\000\
\075\000\075\000\075\000\000\000\000\000\075\000\075\000\075\000\
\075\000\075\000\076\000\000\000\075\000\000\000\075\000\000\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\000\000\000\000\000\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\000\000\000\000\076\000\076\000\076\000\
\076\000\076\000\081\000\000\000\076\000\000\000\076\000\000\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\000\000\000\000\081\000\081\000\
\081\000\081\000\081\000\000\000\000\000\081\000\081\000\081\000\
\081\000\081\000\082\000\000\000\081\000\000\000\081\000\000\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\000\000\000\000\000\000\096\000\000\000\082\000\082\000\
\082\000\082\000\082\000\096\000\000\000\082\000\082\000\082\000\
\082\000\082\000\000\000\000\000\082\000\000\000\082\000\088\000\
\096\000\096\000\096\000\096\000\096\000\000\000\088\000\096\000\
\096\000\096\000\096\000\096\000\000\000\000\000\096\000\000\000\
\096\000\084\000\000\000\088\000\088\000\088\000\088\000\088\000\
\084\000\000\000\088\000\088\000\088\000\088\000\088\000\000\000\
\000\000\088\000\000\000\088\000\083\000\084\000\084\000\084\000\
\084\000\084\000\000\000\083\000\084\000\084\000\084\000\084\000\
\084\000\000\000\000\000\084\000\000\000\084\000\086\000\000\000\
\083\000\083\000\083\000\083\000\083\000\086\000\000\000\083\000\
\083\000\083\000\083\000\083\000\000\000\000\000\083\000\000\000\
\083\000\085\000\086\000\086\000\086\000\086\000\086\000\000\000\
\085\000\086\000\086\000\086\000\086\000\086\000\000\000\000\000\
\086\000\000\000\086\000\089\000\000\000\085\000\085\000\085\000\
\085\000\085\000\089\000\000\000\085\000\085\000\085\000\085\000\
\085\000\000\000\000\000\085\000\000\000\085\000\090\000\089\000\
\089\000\089\000\089\000\089\000\000\000\090\000\089\000\089\000\
\089\000\089\000\089\000\000\000\100\000\089\000\000\000\089\000\
\101\000\000\000\000\000\090\000\090\000\090\000\090\000\000\000\
\000\000\090\000\090\000\090\000\090\000\090\000\097\000\000\000\
\090\000\098\000\090\000\100\000\100\000\099\000\000\000\101\000\
\101\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\100\000\000\000\101\000\000\000\101\000\097\000\097\000\000\000\
\098\000\098\000\000\000\000\000\099\000\099\000\000\000\000\000\
\097\000\000\000\097\000\098\000\000\000\098\000\000\000\099\000\
\000\000\099\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\056\000\057\000\000\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\000\000\000\000\000\000\066\000\
\104\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\000\000\000\000\055\000\
\056\000\057\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\000\000\000\000\000\000\066\000\105\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\055\000\056\000\
\057\000\000\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\000\000\000\000\074\000\066\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\055\000\056\000\057\000\103\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\000\000\000\000\000\000\066\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\000\000\055\000\056\000\057\000\000\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\000\000\000\000\
\000\000\066\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\056\000\057\000\000\000\000\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\000\000\000\000\043\000\066\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\055\000\056\000\000\000\000\000\
\000\000\059\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\066\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\059\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\066\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000"

let yycheck = "\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\033\001\
\034\001\035\001\001\001\001\000\018\001\004\001\043\001\044\001\
\007\001\043\001\044\001\042\001\051\001\012\001\033\001\053\001\
\053\001\052\001\019\000\053\001\033\000\052\001\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\052\001\018\001\
\061\000\062\000\063\000\064\000\065\000\066\000\255\255\068\000\
\069\000\001\001\018\001\255\255\004\001\018\001\075\000\007\001\
\255\255\255\255\010\001\255\255\012\001\013\001\014\001\042\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\255\255\052\001\042\001\255\255\041\001\042\001\255\255\031\001\
\032\001\033\001\103\000\255\255\036\001\037\001\255\255\052\001\
\255\255\054\001\255\255\043\001\044\001\255\255\010\001\018\001\
\255\255\013\001\014\001\051\001\016\001\255\255\025\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\041\001\042\001\
\036\001\037\001\045\001\046\001\047\001\048\001\049\001\043\001\
\044\001\052\001\018\001\054\001\255\255\255\255\010\001\051\001\
\052\001\013\001\014\001\255\255\016\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\041\001\042\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\255\255\255\255\052\001\255\255\054\001\043\001\
\044\001\255\255\018\001\255\255\255\255\255\255\255\255\051\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\053\001\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\053\001\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\018\001\255\255\052\001\255\255\054\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\018\001\255\255\038\001\039\001\
\040\001\041\001\042\001\025\001\255\255\045\001\046\001\047\001\
\048\001\049\001\255\255\255\255\052\001\255\255\054\001\018\001\
\038\001\039\001\040\001\041\001\042\001\255\255\025\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\052\001\255\255\
\054\001\018\001\255\255\038\001\039\001\040\001\041\001\042\001\
\025\001\255\255\045\001\046\001\047\001\048\001\049\001\255\255\
\255\255\052\001\255\255\054\001\018\001\038\001\039\001\040\001\
\041\001\042\001\255\255\025\001\045\001\046\001\047\001\048\001\
\049\001\255\255\255\255\052\001\255\255\054\001\018\001\255\255\
\038\001\039\001\040\001\041\001\042\001\025\001\255\255\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\052\001\255\255\
\054\001\018\001\038\001\039\001\040\001\041\001\042\001\255\255\
\025\001\045\001\046\001\047\001\048\001\049\001\255\255\255\255\
\052\001\255\255\054\001\018\001\255\255\038\001\039\001\040\001\
\041\001\042\001\025\001\255\255\045\001\046\001\047\001\048\001\
\049\001\255\255\255\255\052\001\255\255\054\001\018\001\038\001\
\039\001\040\001\041\001\042\001\255\255\025\001\045\001\046\001\
\047\001\048\001\049\001\255\255\018\001\052\001\255\255\054\001\
\018\001\255\255\255\255\039\001\040\001\041\001\042\001\255\255\
\255\255\045\001\046\001\047\001\048\001\049\001\018\001\255\255\
\052\001\018\001\054\001\041\001\042\001\018\001\255\255\041\001\
\042\001\255\255\255\255\255\255\255\255\255\255\052\001\255\255\
\054\001\255\255\052\001\255\255\054\001\041\001\042\001\255\255\
\041\001\042\001\255\255\255\255\041\001\042\001\255\255\255\255\
\052\001\255\255\054\001\052\001\255\255\054\001\255\255\052\001\
\255\255\054\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\255\255\053\001\
\054\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\255\255\255\255\053\001\054\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\255\255\052\001\053\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\255\255\255\255\053\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\255\255\
\255\255\053\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\024\001\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\255\255\255\255\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001"

let yynames_const = "\
  T_bool\000\
  T_break\000\
  T_byref\000\
  T_char\000\
  T_continue\000\
  T_delete\000\
  T_double\000\
  T_else\000\
  T_for\000\
  T_false\000\
  T_if\000\
  T_int\000\
  T_new\000\
  T_NULL\000\
  T_return\000\
  T_true\000\
  T_void\000\
  T_eof\000\
  T_assign\000\
  T_eq\000\
  T_neq\000\
  T_gt\000\
  T_lt\000\
  T_ge\000\
  T_le\000\
  T_plus\000\
  T_minus\000\
  T_times\000\
  T_div\000\
  T_mod\000\
  T_bitand\000\
  T_bitnot\000\
  T_and\000\
  T_or\000\
  T_q\000\
  T_colon\000\
  T_comma\000\
  T_plusplus\000\
  T_minusminus\000\
  T_pluseq\000\
  T_minuseq\000\
  T_timeseq\000\
  T_diveq\000\
  T_modeq\000\
  T_semicol\000\
  T_lparen\000\
  T_rparen\000\
  T_lbracket\000\
  T_rbracket\000\
  T_lcurl\000\
  T_rcurl\000\
  "

let yynames_block = "\
  T_intconst\000\
  T_doubleconst\000\
  T_id\000\
  T_charconst\000\
  T_stringliteral\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 152 "bin/parser.mly"
                                ( _1 )
# 585 "bin/parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "bin/parser.mly"
                                          ( () )
# 591 "bin/parser.ml"
               : 'optional_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'optional_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 156 "bin/parser.mly"
                                                                  ( () )
# 599 "bin/parser.ml"
               : 'optional_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 159 "bin/parser.mly"
                                   ( )
# 606 "bin/parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_declaration) in
    Obj.repr(
# 160 "bin/parser.mly"
                                   (  )
# 613 "bin/parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 161 "bin/parser.mly"
                                   (  )
# 620 "bin/parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'optional_declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_statement_list) in
    Obj.repr(
# 164 "bin/parser.mly"
                                                                   ( )
# 628 "bin/parser.ml"
               : 'inside_brackets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "bin/parser.mly"
                   ()
# 635 "bin/parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constant_expression) in
    Obj.repr(
# 168 "bin/parser.mly"
                                                            (  )
# 643 "bin/parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 171 "bin/parser.mly"
                             ()
# 650 "bin/parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator_list) in
    Obj.repr(
# 172 "bin/parser.mly"
                                                     (  )
# 658 "bin/parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator_list) in
    Obj.repr(
# 175 "bin/parser.mly"
                                                       (  )
# 666 "bin/parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_T_times_list) in
    Obj.repr(
# 183 "bin/parser.mly"
                                                                  ( 
   if _2==0 then _1 else TYPE_ptr ({ttype=_1; level=_2})
)
# 676 "bin/parser.ml"
               : Types.typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "bin/parser.mly"
                                                          ( 0 )
# 682 "bin/parser.ml"
               : 'optional_T_times_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'optional_T_times_list) in
    Obj.repr(
# 188 "bin/parser.mly"
                                                      ( _1 + 1 )
# 689 "bin/parser.ml"
               : 'optional_T_times_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "bin/parser.mly"
                    ( TYPE_int )
# 695 "bin/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "bin/parser.mly"
                    ( TYPE_char )
# 701 "bin/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "bin/parser.mly"
                    ( TYPE_bool )
# 707 "bin/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "bin/parser.mly"
                      ( TYPE_double )
# 713 "bin/parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'optional_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'inside_brackets) in
    Obj.repr(
# 199 "bin/parser.mly"
                    (  )
# 723 "bin/parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'optional_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'inside_brackets) in
    Obj.repr(
# 201 "bin/parser.mly"
                    (  )
# 732 "bin/parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optional_parameter_list) in
    Obj.repr(
# 204 "bin/parser.mly"
                     (  )
# 741 "bin/parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optional_parameter_list) in
    Obj.repr(
# 206 "bin/parser.mly"
                     (  )
# 749 "bin/parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 209 "bin/parser.mly"
                           ( )
# 756 "bin/parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 210 "bin/parser.mly"
                                                  ( )
# 764 "bin/parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "bin/parser.mly"
                                      (  )
# 770 "bin/parser.ml"
               : 'optional_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 213 "bin/parser.mly"
                                         ( )
# 777 "bin/parser.ml"
               : 'optional_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Types.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 216 "bin/parser.mly"
                       ( )
# 785 "bin/parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 217 "bin/parser.mly"
                               (  )
# 793 "bin/parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "bin/parser.mly"
                                    (  )
# 799 "bin/parser.ml"
               : 'optional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 222 "bin/parser.mly"
                                 ( )
# 806 "bin/parser.ml"
               : 'optional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 231 "bin/parser.mly"
                                                  ( _1::[] )
# 813 "bin/parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 232 "bin/parser.mly"
                                                     ( _3::_1 )
# 821 "bin/parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 239 "bin/parser.mly"
                           (  )
# 828 "bin/parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 240 "bin/parser.mly"
                                          ( )
# 836 "bin/parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "bin/parser.mly"
                                        ( )
# 842 "bin/parser.ml"
               : 'optional_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 245 "bin/parser.mly"
                                         (  )
# 849 "bin/parser.ml"
               : 'optional_statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "bin/parser.mly"
                                                 (  )
# 855 "bin/parser.ml"
               : 'optional_for_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 249 "bin/parser.mly"
                                  (  )
# 862 "bin/parser.ml"
               : 'optional_for_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "bin/parser.mly"
                                ( )
# 868 "bin/parser.ml"
               : 'optional_label_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 253 "bin/parser.mly"
                                     ( )
# 875 "bin/parser.ml"
               : 'optional_label_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matched_if) in
    Obj.repr(
# 263 "bin/parser.mly"
                       ( )
# 882 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unmatched_if) in
    Obj.repr(
# 264 "bin/parser.mly"
                         ( )
# 889 "bin/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'matched_if) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'matched_if) in
    Obj.repr(
# 267 "bin/parser.mly"
                                                                            (  )
# 898 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "bin/parser.mly"
                       ( )
# 904 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 269 "bin/parser.mly"
                                  (  )
# 911 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_statement_list) in
    Obj.repr(
# 270 "bin/parser.mly"
                                                     (  )
# 918 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'optional_for_label) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'optional_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'optional_expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'optional_expression) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 274 "bin/parser.mly"
                                (  )
# 929 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_label_semi) in
    Obj.repr(
# 276 "bin/parser.mly"
                                            (  )
# 936 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_label_semi) in
    Obj.repr(
# 277 "bin/parser.mly"
                                         (  )
# 943 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_expression) in
    Obj.repr(
# 278 "bin/parser.mly"
                                                    (  )
# 950 "bin/parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 283 "bin/parser.mly"
                                                           (  )
# 958 "bin/parser.ml"
               : 'unmatched_if))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'matched_if) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'unmatched_if) in
    Obj.repr(
# 284 "bin/parser.mly"
                                                                                (  )
# 967 "bin/parser.ml"
               : 'unmatched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 287 "bin/parser.mly"
                  ( Ident _1 )
# 974 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 288 "bin/parser.mly"
                                          ( _2 )
# 981 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "bin/parser.mly"
                    ( Bool true )
# 987 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "bin/parser.mly"
                     ( Bool false )
# 993 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "bin/parser.mly"
                    ( () )
# 999 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 293 "bin/parser.mly"
                        ( Int _1 )
# 1006 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 294 "bin/parser.mly"
                         ( Char _1 )
# 1013 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 295 "bin/parser.mly"
                           ( Float _1 )
# 1020 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "bin/parser.mly"
                             ( String _1 )
# 1027 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 297 "bin/parser.mly"
                                    ( FuncCall ({name=_1; parameters=[]}) )
# 1034 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 298 "bin/parser.mly"
                                                    ( FuncCall ({name=_1; parameters=_3}) )
# 1042 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 299 "bin/parser.mly"
                                                         ( Array ({name=_1; size=_3}) )
# 1050 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 300 "bin/parser.mly"
                              ( _1 )
# 1057 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_expression) in
    Obj.repr(
# 301 "bin/parser.mly"
                               ( _1 )
# 1064 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_assignment) in
    Obj.repr(
# 302 "bin/parser.mly"
                              ( _1 )
# 1071 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_assignment) in
    Obj.repr(
# 303 "bin/parser.mly"
                               ( _1 )
# 1078 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Types.typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 304 "bin/parser.mly"
                                                                ( TypeCast ({new_type=_2; casted_expr=_4}) )
# 1086 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 305 "bin/parser.mly"
                                                          ( InlineIf ({cond=_1; true_expr=_3; false_expr=_5}) )
# 1095 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optional_new) in
    Obj.repr(
# 306 "bin/parser.mly"
                                      ( New ({ttype=_2; size=_3}) )
# 1103 "bin/parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 309 "bin/parser.mly"
                                                                    ( UnaryExpr(BitAnd,_2) )
# 1110 "bin/parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 310 "bin/parser.mly"
                                                                    ( UnaryExpr(UTimes,_2) )
# 1117 "bin/parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 311 "bin/parser.mly"
                                                                    ( UnaryExpr(UPlus,_2)  )
# 1124 "bin/parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 312 "bin/parser.mly"
                                                                    ( UnaryExpr(UMinus,_2) )
# 1131 "bin/parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 313 "bin/parser.mly"
                                                                    ( UnaryExpr(BitNot,_2) )
# 1138 "bin/parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 316 "bin/parser.mly"
                                                  ( BinExpr(Times,_1,_3) )
# 1146 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 317 "bin/parser.mly"
                                                  ( BinExpr(Div,_1,_3)   )
# 1154 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 318 "bin/parser.mly"
                                                  ( BinExpr(Mod,_1,_3)   )
# 1162 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 319 "bin/parser.mly"
                                                  ( BinExpr(Plus,_1,_3)  )
# 1170 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 320 "bin/parser.mly"
                                                  ( BinExpr(Minus,_1,_3) )
# 1178 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 321 "bin/parser.mly"
                                                  ( BinExpr(Lt,_1,_3)    )
# 1186 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 322 "bin/parser.mly"
                                                  ( BinExpr(Gt,_1,_3)    )
# 1194 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 323 "bin/parser.mly"
                                                  ( BinExpr(Le,_1,_3)    )
# 1202 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 324 "bin/parser.mly"
                                                  ( BinExpr(Ge,_1,_3)    )
# 1210 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 325 "bin/parser.mly"
                                                  ( BinExpr(Eq,_1,_3)    )
# 1218 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 326 "bin/parser.mly"
                                                  ( BinExpr(Neq,_1,_3)   )
# 1226 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 327 "bin/parser.mly"
                                                  ( BinExpr(And,_1,_3)   )
# 1234 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 328 "bin/parser.mly"
                                                  ( BinExpr(Or,_1,_3)    )
# 1242 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 329 "bin/parser.mly"
                                                  ( BinExpr(Comma,_1,_3) )
# 1250 "bin/parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 332 "bin/parser.mly"
                                                        ( UnaryAssign(PrePlusPlus,_2)    )
# 1257 "bin/parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 333 "bin/parser.mly"
                                                        ( UnaryAssign(PreMinusMinus,_2)  )
# 1264 "bin/parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 334 "bin/parser.mly"
                                                        ( UnaryAssign(PostPlusPlus,_1)   )
# 1271 "bin/parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 335 "bin/parser.mly"
                                                        ( UnaryAssign(PostMinusMinus,_1) )
# 1278 "bin/parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 338 "bin/parser.mly"
                                                    ( BinAssign(Assign, _1, _3)  )
# 1286 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 339 "bin/parser.mly"
                                                    ( BinAssign(TimesEq, _1, _3) )
# 1294 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 340 "bin/parser.mly"
                                                    ( BinAssign(DivEq, _1, _3)   )
# 1302 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 341 "bin/parser.mly"
                                                    ( BinAssign(ModEq, _1, _3)   )
# 1310 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 342 "bin/parser.mly"
                                                    ( BinAssign(PlusEq, _1, _3)  )
# 1318 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 343 "bin/parser.mly"
                                                    ( BinAssign(MinusEq, _1, _3) )
# 1326 "bin/parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 352 "bin/parser.mly"
                                              ( () )
# 1332 "bin/parser.ml"
               : 'optional_new))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 353 "bin/parser.mly"
                                                ( _2 )
# 1339 "bin/parser.ml"
               : 'optional_new))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 356 "bin/parser.mly"
                                 ( )
# 1346 "bin/parser.ml"
               : 'constant_expression))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr list)
