type token =
  | T_bool
  | T_break
  | T_byref
  | T_char
  | T_continue
  | T_delete
  | T_double
  | T_else
  | T_for
  | T_false
  | T_if
  | T_int
  | T_new
  | T_NULL
  | T_return
  | T_true
  | T_void
  | T_eof
  | T_intconst of (int)
  | T_doubleconst of (float)
  | T_id of (string)
  | T_charconst of (char)
  | T_stringliteral of (string)
  | T_assign
  | T_eq
  | T_neq
  | T_gt
  | T_lt
  | T_ge
  | T_le
  | T_plus
  | T_minus
  | T_times
  | T_div
  | T_mod
  | T_bitand
  | T_bitnot
  | T_and
  | T_or
  | T_q
  | T_colon
  | T_comma
  | T_plusplus
  | T_minusminus
  | T_pluseq
  | T_minuseq
  | T_timeseq
  | T_diveq
  | T_modeq
  | T_semicol
  | T_lparen
  | T_rparen
  | T_lbracket
  | T_rbracket
  | T_lcurl
  | T_rcurl

open Parsing;;
let _ = parse_error;;
# 3 "Parser.mly"
    open Printf
    open Ast
    let get_loc = Parsing.symbol_start_pos 

# 67 "Parser.ml"
let yytransl_const = [|
  257 (* T_bool *);
  258 (* T_break *);
  259 (* T_byref *);
  260 (* T_char *);
  261 (* T_continue *);
  262 (* T_delete *);
  263 (* T_double *);
  264 (* T_else *);
  265 (* T_for *);
  266 (* T_false *);
  267 (* T_if *);
  268 (* T_int *);
  269 (* T_new *);
  270 (* T_NULL *);
  271 (* T_return *);
  272 (* T_true *);
  273 (* T_void *);
  274 (* T_eof *);
  280 (* T_assign *);
  281 (* T_eq *);
  282 (* T_neq *);
  283 (* T_gt *);
  284 (* T_lt *);
  285 (* T_ge *);
  286 (* T_le *);
  287 (* T_plus *);
  288 (* T_minus *);
  289 (* T_times *);
  290 (* T_div *);
  291 (* T_mod *);
  292 (* T_bitand *);
  293 (* T_bitnot *);
  294 (* T_and *);
  295 (* T_or *);
  296 (* T_q *);
  297 (* T_colon *);
  298 (* T_comma *);
  299 (* T_plusplus *);
  300 (* T_minusminus *);
  301 (* T_pluseq *);
  302 (* T_minuseq *);
  303 (* T_timeseq *);
  304 (* T_diveq *);
  305 (* T_modeq *);
  306 (* T_semicol *);
  307 (* T_lparen *);
  308 (* T_rparen *);
  309 (* T_lbracket *);
  310 (* T_rbracket *);
  311 (* T_lcurl *);
  312 (* T_rcurl *);
    0|]

let yytransl_block = [|
  275 (* T_intconst *);
  276 (* T_doubleconst *);
  277 (* T_id *);
  278 (* T_charconst *);
  279 (* T_stringliteral *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\006\000\006\000\006\000\011\000\012\000\
\012\000\014\000\014\000\008\000\007\000\016\000\016\000\015\000\
\015\000\015\000\015\000\010\000\010\000\009\000\009\000\018\000\
\018\000\017\000\017\000\019\000\019\000\002\000\002\000\003\000\
\003\000\021\000\021\000\004\000\004\000\023\000\023\000\024\000\
\024\000\022\000\022\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\026\000\026\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\027\000\027\000\027\000\027\000\027\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\029\000\029\000\029\000\
\029\000\030\000\030\000\030\000\030\000\030\000\030\000\031\000\
\031\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\002\000\001\000\
\004\000\001\000\003\000\003\000\002\000\000\000\002\000\001\000\
\001\000\001\000\001\000\008\000\008\000\006\000\006\000\001\000\
\003\000\000\000\001\000\002\000\003\000\000\000\001\000\001\000\
\003\000\001\000\002\000\000\000\001\000\000\000\002\000\001\000\
\002\000\001\000\001\000\007\000\001\000\002\000\003\000\010\000\
\002\000\002\000\003\000\005\000\007\000\001\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\004\000\004\000\001\000\001\000\001\000\001\000\004\000\005\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
\003\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\107\000\000\000\018\000\017\000\019\000\016\000\
\000\000\001\000\003\000\000\000\004\000\005\000\006\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\015\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\058\000\000\000\059\000\057\000\060\000\062\000\
\000\000\061\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\000\000\011\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\000\097\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\023\000\002\000\
\025\000\022\000\002\000\000\000\073\000\064\000\000\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\007\000\000\000\000\000\034\000\000\000\042\000\043\000\021\000\
\020\000\105\000\000\000\000\000\000\000\040\000\050\000\049\000\
\000\000\000\000\000\000\039\000\000\000\046\000\035\000\000\000\
\041\000\000\000\051\000\047\000\000\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\044\000\053\000\000\000\000\000\
\000\000\048\000"

let yydgoto = "\002\000\
\003\000\170\000\111\000\153\000\137\000\011\000\029\000\013\000\
\014\000\015\000\138\000\019\000\052\000\020\000\016\000\021\000\
\030\000\031\000\032\000\154\000\155\000\156\000\157\000\167\000\
\158\000\159\000\054\000\055\000\056\000\057\000\109\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\027\255\000\000\000\000\000\000\000\000\
\014\255\000\000\000\000\017\255\000\000\000\000\000\000\000\000\
\252\254\000\255\028\255\021\255\054\255\136\255\136\255\069\000\
\078\255\000\000\000\000\114\255\088\255\064\255\077\255\000\000\
\080\255\069\000\000\000\114\255\000\000\000\000\000\000\000\000\
\079\255\000\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\249\255\075\255\121\003\000\000\000\000\000\000\
\000\000\094\255\000\000\112\255\000\000\215\254\136\255\217\254\
\035\255\096\255\029\000\047\255\047\255\035\255\035\255\035\255\
\035\255\035\255\092\255\227\002\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\000\000\000\000\246\254\121\003\
\105\000\000\000\235\003\151\003\235\003\235\003\235\003\235\003\
\235\003\047\255\047\255\035\255\035\255\035\255\235\003\207\003\
\001\003\151\003\151\003\151\003\151\003\151\003\151\003\243\000\
\091\255\095\255\097\255\018\001\069\000\000\000\035\255\069\000\
\000\000\239\254\239\254\099\255\069\000\251\254\000\000\197\255\
\000\000\031\003\197\255\000\000\145\255\000\000\000\000\000\000\
\000\000\000\000\151\003\179\003\108\255\000\000\000\000\000\000\
\069\000\118\255\121\003\000\000\119\255\000\000\000\000\123\255\
\000\000\061\003\000\000\000\000\069\000\197\255\126\255\000\000\
\169\255\069\000\197\255\128\255\000\000\000\000\069\000\132\255\
\197\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\255\135\255\000\000\119\000\137\255\137\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\139\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\141\255\000\000\000\000\000\000\
\000\000\044\255\000\000\000\000\000\000\000\000\000\000\000\000\
\049\001\212\000\000\000\103\002\134\002\080\001\111\001\142\001\
\173\001\204\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\255\
\181\000\000\000\251\003\221\254\013\004\031\004\049\004\067\004\
\085\004\165\002\196\002\235\001\010\002\041\002\103\004\121\004\
\000\000\138\255\173\255\225\255\005\000\045\000\081\000\000\000\
\248\254\000\000\000\000\000\000\000\000\000\000\072\002\000\000\
\000\000\000\000\000\000\000\000\147\255\091\003\000\000\248\254\
\000\000\000\000\249\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\254\254\139\004\000\000\000\000\000\000\000\000\
\000\000\000\000\033\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\255\189\255\000\000\000\000\
\150\255\147\255\189\255\000\000\000\000\000\000\152\255\000\000\
\189\255\000\000"

let yygindex = "\000\000\
\000\000\083\255\000\000\057\000\220\000\000\000\001\000\000\000\
\000\000\000\000\115\000\000\000\000\000\199\000\000\000\000\000\
\203\000\000\000\168\000\232\255\000\000\104\255\000\000\085\000\
\205\255\048\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1473
let yytable = "\053\000\
\038\000\038\000\175\000\165\000\012\000\089\000\089\000\183\000\
\103\000\065\000\106\000\001\000\188\000\104\000\089\000\107\000\
\089\000\192\000\089\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\076\000\005\000\060\000\184\000\006\000\141\000\
\166\000\007\000\017\000\172\000\066\000\018\000\008\000\033\000\
\194\000\142\000\112\000\009\000\010\000\067\000\022\000\036\000\
\037\000\033\000\023\000\075\000\024\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\130\000\025\000\026\000\131\000\
\132\000\133\000\134\000\135\000\136\000\094\000\095\000\087\000\
\088\000\089\000\031\000\140\000\031\000\008\000\027\000\101\000\
\143\000\094\000\095\000\005\000\146\000\008\000\006\000\147\000\
\034\000\007\000\058\000\101\000\035\000\148\000\008\000\036\000\
\037\000\149\000\038\000\009\000\061\000\039\000\040\000\150\000\
\042\000\043\000\005\000\062\000\163\000\006\000\063\000\164\000\
\007\000\044\000\045\000\046\000\171\000\008\000\047\000\048\000\
\077\000\067\000\185\000\064\000\102\000\049\000\050\000\189\000\
\005\000\012\000\028\000\006\000\151\000\051\000\007\000\113\000\
\178\000\152\000\024\000\008\000\108\000\169\000\160\000\042\000\
\161\000\176\000\042\000\042\000\171\000\177\000\042\000\042\000\
\042\000\171\000\042\000\042\000\042\000\042\000\171\000\179\000\
\042\000\042\000\042\000\042\000\042\000\181\000\180\000\186\000\
\187\000\191\000\093\000\093\000\042\000\042\000\042\000\193\000\
\010\000\042\000\042\000\093\000\026\000\093\000\027\000\093\000\
\042\000\042\000\106\000\032\000\030\000\038\000\146\000\042\000\
\042\000\147\000\034\000\030\000\042\000\042\000\035\000\148\000\
\173\000\036\000\037\000\149\000\038\000\102\000\102\000\039\000\
\040\000\150\000\042\000\043\000\004\000\139\000\102\000\059\000\
\102\000\033\000\102\000\044\000\045\000\046\000\105\000\168\000\
\047\000\048\000\190\000\000\000\000\000\000\000\000\000\049\000\
\050\000\000\000\000\000\000\000\000\000\000\000\151\000\051\000\
\000\000\005\000\000\000\152\000\006\000\000\000\034\000\007\000\
\000\000\000\000\035\000\000\000\008\000\036\000\037\000\000\000\
\038\000\103\000\103\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\103\000\000\000\103\000\000\000\103\000\044\000\
\045\000\046\000\000\000\000\000\047\000\048\000\000\000\000\000\
\000\000\000\000\034\000\049\000\050\000\000\000\035\000\000\000\
\000\000\036\000\037\000\051\000\038\000\099\000\099\000\039\000\
\040\000\041\000\042\000\043\000\000\000\000\000\099\000\000\000\
\099\000\000\000\099\000\044\000\045\000\046\000\000\000\000\000\
\047\000\048\000\000\000\000\000\000\000\000\000\000\000\049\000\
\050\000\000\000\034\000\000\000\000\000\000\000\035\000\051\000\
\110\000\036\000\037\000\000\000\038\000\100\000\100\000\039\000\
\040\000\041\000\042\000\043\000\000\000\000\000\100\000\000\000\
\100\000\000\000\100\000\044\000\045\000\046\000\000\000\000\000\
\047\000\048\000\000\000\000\000\000\000\000\000\034\000\049\000\
\050\000\000\000\035\000\000\000\000\000\036\000\037\000\051\000\
\038\000\101\000\101\000\039\000\040\000\041\000\042\000\043\000\
\000\000\000\000\101\000\000\000\101\000\000\000\101\000\000\000\
\000\000\000\000\000\000\013\000\047\000\048\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\000\000\051\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
\056\000\056\000\056\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\000\000\
\000\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\000\000\104\000\
\000\000\104\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\000\000\000\000\
\090\000\091\000\092\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\000\000\000\000\000\000\101\000\
\145\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\000\000\000\000\090\000\
\091\000\092\000\000\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\000\000\000\000\000\000\101\000\162\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\000\000\074\000\074\000\
\074\000\074\000\074\000\000\000\000\000\074\000\074\000\074\000\
\074\000\074\000\074\000\000\000\074\000\000\000\074\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\000\000\000\000\076\000\076\000\076\000\
\076\000\076\000\000\000\000\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\076\000\000\000\076\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
\075\000\000\000\075\000\000\000\075\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\000\000\000\000\079\000\079\000\079\000\079\000\079\000\
\000\000\000\000\079\000\079\000\079\000\079\000\079\000\079\000\
\000\000\079\000\000\000\079\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\000\000\000\000\094\000\094\000\094\000\094\000\094\000\000\000\
\000\000\094\000\094\000\094\000\094\000\094\000\094\000\000\000\
\094\000\000\000\094\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\000\000\
\000\000\095\000\095\000\095\000\095\000\095\000\000\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\000\000\095\000\
\000\000\095\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\000\000\000\000\
\080\000\080\000\080\000\080\000\080\000\000\000\000\000\080\000\
\080\000\080\000\080\000\080\000\080\000\000\000\080\000\000\000\
\080\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\000\000\000\000\081\000\
\081\000\081\000\081\000\081\000\000\000\000\000\081\000\081\000\
\081\000\081\000\081\000\081\000\000\000\081\000\000\000\081\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\000\000\000\000\082\000\082\000\
\082\000\082\000\082\000\000\000\000\000\082\000\082\000\082\000\
\082\000\082\000\082\000\000\000\082\000\000\000\082\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\000\000\071\000\071\000\071\000\
\071\000\071\000\000\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\071\000\000\000\071\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
\000\000\000\000\000\000\000\000\077\000\077\000\077\000\077\000\
\077\000\000\000\000\000\077\000\077\000\077\000\077\000\077\000\
\077\000\000\000\077\000\000\000\077\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\000\000\000\000\
\000\000\000\000\000\000\078\000\078\000\078\000\078\000\078\000\
\000\000\000\000\078\000\078\000\078\000\078\000\078\000\078\000\
\000\000\078\000\000\000\078\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\000\000\000\000\000\000\
\000\000\000\000\083\000\083\000\083\000\083\000\083\000\000\000\
\000\000\083\000\083\000\083\000\083\000\083\000\083\000\000\000\
\083\000\000\000\083\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\000\000\000\000\000\000\000\000\
\000\000\084\000\084\000\084\000\084\000\084\000\000\000\000\000\
\084\000\084\000\084\000\084\000\084\000\084\000\000\000\084\000\
\000\000\084\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\000\000\000\000\
\090\000\091\000\092\000\000\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\000\000\000\000\114\000\101\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\091\000\
\092\000\144\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\000\000\000\000\000\000\101\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\000\000\000\000\090\000\091\000\092\000\000\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\174\000\000\000\000\000\101\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\000\000\000\000\090\000\091\000\092\000\000\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\000\000\000\000\
\182\000\101\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\054\000\054\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\000\000\000\000\054\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\000\000\000\000\090\000\091\000\
\092\000\000\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\000\000\000\000\000\000\101\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\000\000\000\000\090\000\091\000\092\000\000\000\
\000\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\000\000\000\000\078\000\101\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\000\000\000\000\
\090\000\091\000\000\000\000\000\000\000\094\000\095\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\101\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\000\000\000\000\090\000\000\000\000\000\000\000\
\000\000\094\000\095\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\101\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\000\000\000\000\
\000\000\000\000\000\000\098\000\000\000\094\000\095\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\
\098\000\098\000\098\000\098\000\098\000\090\000\000\000\098\000\
\098\000\098\000\098\000\098\000\098\000\000\000\098\000\000\000\
\098\000\000\000\090\000\090\000\090\000\090\000\090\000\086\000\
\000\000\090\000\090\000\090\000\090\000\090\000\090\000\000\000\
\090\000\000\000\090\000\000\000\086\000\086\000\086\000\086\000\
\086\000\085\000\000\000\086\000\086\000\086\000\086\000\086\000\
\086\000\000\000\086\000\000\000\086\000\000\000\085\000\085\000\
\085\000\085\000\085\000\088\000\000\000\085\000\085\000\085\000\
\085\000\085\000\085\000\000\000\085\000\000\000\085\000\000\000\
\088\000\088\000\088\000\088\000\088\000\087\000\000\000\088\000\
\088\000\088\000\088\000\088\000\088\000\000\000\088\000\000\000\
\088\000\000\000\087\000\087\000\087\000\087\000\087\000\091\000\
\000\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
\087\000\000\000\087\000\000\000\091\000\091\000\091\000\091\000\
\091\000\092\000\000\000\091\000\091\000\091\000\091\000\091\000\
\091\000\000\000\091\000\000\000\091\000\000\000\000\000\092\000\
\092\000\092\000\092\000\072\000\000\000\092\000\092\000\092\000\
\092\000\092\000\092\000\000\000\092\000\000\000\092\000\000\000\
\000\000\000\000\000\000\072\000\072\000\000\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\000\000\072\000\000\000\
\072\000"

let yycheck = "\024\000\
\009\001\009\001\155\000\021\001\004\000\041\001\042\001\181\000\
\050\001\034\000\050\001\001\000\186\000\055\001\050\001\055\001\
\052\001\191\000\054\001\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\001\001\028\000\182\000\004\001\042\001\
\050\001\007\001\021\001\041\001\036\000\021\001\012\001\042\001\
\193\000\052\001\067\000\017\001\018\001\051\001\051\001\056\001\
\056\001\052\001\051\001\051\000\053\001\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\042\001\050\001\096\000\
\097\000\098\000\099\000\100\000\101\000\043\001\044\001\033\001\
\034\001\035\001\050\001\108\000\052\001\042\001\033\001\053\001\
\113\000\043\001\044\001\001\001\002\001\050\001\004\001\005\001\
\006\001\007\001\021\001\053\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\021\001\019\001\020\001\021\001\
\022\001\023\001\001\001\052\001\141\000\004\001\042\001\144\000\
\007\001\031\001\032\001\033\001\149\000\012\001\036\001\037\001\
\054\001\051\001\182\000\052\001\021\001\043\001\044\001\187\000\
\001\001\137\000\003\001\004\001\050\001\051\001\007\001\052\001\
\169\000\055\001\053\001\012\001\053\001\051\001\056\001\002\001\
\056\001\009\001\005\001\006\001\181\000\050\001\009\001\010\001\
\011\001\186\000\013\001\014\001\015\001\016\001\191\000\050\001\
\019\001\020\001\021\001\022\001\023\001\051\001\056\001\050\001\
\008\001\050\001\041\001\042\001\031\001\032\001\033\001\052\001\
\050\001\036\001\037\001\050\001\052\001\052\001\052\001\054\001\
\043\001\044\001\054\001\052\001\050\001\009\001\002\001\050\001\
\051\001\005\001\006\001\052\001\055\001\056\001\010\001\011\001\
\152\000\013\001\014\001\015\001\016\001\041\001\042\001\019\001\
\020\001\021\001\022\001\023\001\001\000\107\000\050\001\025\000\
\052\001\023\000\054\001\031\001\032\001\033\001\063\000\147\000\
\036\001\037\001\187\000\255\255\255\255\255\255\255\255\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\050\001\051\001\
\255\255\001\001\255\255\055\001\004\001\255\255\006\001\007\001\
\255\255\255\255\010\001\255\255\012\001\013\001\014\001\255\255\
\016\001\041\001\042\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\050\001\255\255\052\001\255\255\054\001\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\006\001\043\001\044\001\255\255\010\001\255\255\
\255\255\013\001\014\001\051\001\016\001\041\001\042\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\050\001\255\255\
\052\001\255\255\054\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\043\001\
\044\001\255\255\006\001\255\255\255\255\255\255\010\001\051\001\
\052\001\013\001\014\001\255\255\016\001\041\001\042\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\050\001\255\255\
\052\001\255\255\054\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\006\001\043\001\
\044\001\255\255\010\001\255\255\255\255\013\001\014\001\051\001\
\016\001\041\001\042\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\050\001\255\255\052\001\255\255\054\001\255\255\
\255\255\255\255\255\255\021\001\036\001\037\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\035\001\255\255\051\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\053\001\054\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\052\001\053\001\054\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\053\001\054\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\052\001\
\255\255\054\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\255\255\053\001\
\054\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\255\255\255\255\053\001\054\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\052\001\255\255\054\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\255\255\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\052\001\255\255\054\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\255\255\255\255\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\052\001\
\255\255\054\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\255\255\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\052\001\255\255\054\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\052\001\255\255\054\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\255\255\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\052\001\255\255\054\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\255\255\255\255\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\052\001\
\255\255\054\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\052\001\053\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\255\255\255\255\053\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\040\001\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\053\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\255\255\
\052\001\053\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\053\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\255\255\255\255\053\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\255\255\024\001\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\255\255\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\053\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\038\001\255\255\255\255\255\255\
\255\255\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\053\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\025\001\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\038\001\039\001\040\001\041\001\042\001\025\001\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\255\255\038\001\039\001\040\001\041\001\042\001\025\001\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\255\255\038\001\039\001\040\001\041\001\
\042\001\025\001\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\255\255\038\001\039\001\
\040\001\041\001\042\001\025\001\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\255\255\
\038\001\039\001\040\001\041\001\042\001\025\001\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\255\255\038\001\039\001\040\001\041\001\042\001\025\001\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\255\255\038\001\039\001\040\001\041\001\
\042\001\025\001\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\255\255\255\255\039\001\
\040\001\041\001\042\001\025\001\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\255\255\
\255\255\255\255\255\255\041\001\042\001\255\255\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001"

let yynames_const = "\
  T_bool\000\
  T_break\000\
  T_byref\000\
  T_char\000\
  T_continue\000\
  T_delete\000\
  T_double\000\
  T_else\000\
  T_for\000\
  T_false\000\
  T_if\000\
  T_int\000\
  T_new\000\
  T_NULL\000\
  T_return\000\
  T_true\000\
  T_void\000\
  T_eof\000\
  T_assign\000\
  T_eq\000\
  T_neq\000\
  T_gt\000\
  T_lt\000\
  T_ge\000\
  T_le\000\
  T_plus\000\
  T_minus\000\
  T_times\000\
  T_div\000\
  T_mod\000\
  T_bitand\000\
  T_bitnot\000\
  T_and\000\
  T_or\000\
  T_q\000\
  T_colon\000\
  T_comma\000\
  T_plusplus\000\
  T_minusminus\000\
  T_pluseq\000\
  T_minuseq\000\
  T_timeseq\000\
  T_diveq\000\
  T_modeq\000\
  T_semicol\000\
  T_lparen\000\
  T_rparen\000\
  T_lbracket\000\
  T_rbracket\000\
  T_lcurl\000\
  T_rcurl\000\
  "

let yynames_block = "\
  T_intconst\000\
  T_doubleconst\000\
  T_id\000\
  T_charconst\000\
  T_stringliteral\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : declaration list) in
    Obj.repr(
# 152 "Parser.mly"
                                          ( () )
# 699 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "Parser.mly"
                                          ( [] )
# 705 "Parser.ml"
               : declaration list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : declaration list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : declaration) in
    Obj.repr(
# 156 "Parser.mly"
                                                                  ( List.rev _2::_1 )
# 713 "Parser.ml"
               : declaration list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 159 "Parser.mly"
                                   ( [] )
# 720 "Parser.ml"
               : declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_declaration) in
    Obj.repr(
# 160 "Parser.mly"
                                   ( [] )
# 727 "Parser.ml"
               : declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 161 "Parser.mly"
                                   ( [] )
# 734 "Parser.ml"
               : declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : declaration list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : statement list) in
    Obj.repr(
# 164 "Parser.mly"
                                                                   ( (_1*_2) )
# 742 "Parser.ml"
               : 'inside_brackets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "Parser.mly"
                   (ident _1)
# 749 "Parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constant_expression) in
    Obj.repr(
# 168 "Parser.mly"
                                                            ( Array (ident _1,_3) )
# 757 "Parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 171 "Parser.mly"
                             ( [_1] )
# 764 "Parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator_list) in
    Obj.repr(
# 172 "Parser.mly"
                                                     ( List.rev _1::_3 )
# 772 "Parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator_list) in
    Obj.repr(
# 175 "Parser.mly"
                                                       (
   (*we need to traverse the declarator list to declare new vars*)
   let typ = _1
   in
      let add_var t elem = match elem with
              | Array(name,sz) -> VarDeclaration(typ:t; name:name; size:sizeOfType t) 
              | name -> VarDeclaration (typ:t; name:name; size:sizeOfType t)
      in 
         List.iter (add_var t) _2
    )
# 789 "Parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_T_times_list) in
    Obj.repr(
# 192 "Parser.mly"
                                                                  ( _1*_2 )
# 797 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "Parser.mly"
                                                          ( ""  )
# 803 "Parser.ml"
               : 'optional_T_times_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'optional_T_times_list) in
    Obj.repr(
# 196 "Parser.mly"
                                                      (_1^"*")
# 810 "Parser.ml"
               : 'optional_T_times_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "Parser.mly"
                    ( TYPE_int )
# 816 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "Parser.mly"
                    ( TYPE_char )
# 822 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "Parser.mly"
                    ( TYPE_bool )
# 828 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "Parser.mly"
                      ( TYPE_double)
# 834 "Parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'optional_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'inside_brackets) in
    Obj.repr(
# 207 "Parser.mly"
                    ( FuncDef(name=_2; parameters=_4; body=_7) )
# 844 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'optional_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'inside_brackets) in
    Obj.repr(
# 209 "Parser.mly"
                    ( FuncDef(name=_2; parameters=_4; body=_7) )
# 853 "Parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optional_parameter_list) in
    Obj.repr(
# 212 "Parser.mly"
                     ( FuncDecl(name=_2; parameters=_4) )
# 862 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optional_parameter_list) in
    Obj.repr(
# 214 "Parser.mly"
                     ( FuncDecl(name=_2; parameters=_4) )
# 870 "Parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 217 "Parser.mly"
                           ( _1 )
# 877 "Parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 218 "Parser.mly"
                                                  ( List.rev _3::_1 )
# 885 "Parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "Parser.mly"
                                      ( [] )
# 891 "Parser.ml"
               : 'optional_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 221 "Parser.mly"
                                         ( _1 )
# 898 "Parser.ml"
               : 'optional_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 224 "Parser.mly"
                       ( (PASS_BY_VALUE*_1*ident _2) )
# 906 "Parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 225 "Parser.mly"
                               ( ((PASS_BY_REF*_2*ident _2)) )
# 914 "Parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "Parser.mly"
                                    ( () )
# 920 "Parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 230 "Parser.mly"
                                 ( _1 )
# 927 "Parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 239 "Parser.mly"
                                                  ( _1::[] )
# 934 "Parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 240 "Parser.mly"
                                                     ( _3::_1 )
# 942 "Parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 247 "Parser.mly"
                           ( _1::[] )
# 949 "Parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 248 "Parser.mly"
                                          ( _2::_1 )
# 957 "Parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "Parser.mly"
                                        ( [] )
# 963 "Parser.ml"
               : statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 253 "Parser.mly"
                                         ( _1 )
# 970 "Parser.ml"
               : statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "Parser.mly"
                                                 ( "" )
# 976 "Parser.ml"
               : 'optional_for_label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 257 "Parser.mly"
                                  ( _1 )
# 983 "Parser.ml"
               : 'optional_for_label))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "Parser.mly"
                                ( "" )
# 989 "Parser.ml"
               : 'optional_label_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 261 "Parser.mly"
                                     ( _1 )
# 996 "Parser.ml"
               : 'optional_label_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matched_if) in
    Obj.repr(
# 271 "Parser.mly"
                       ( _1 )
# 1003 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unmatched_if) in
    Obj.repr(
# 272 "Parser.mly"
                         ( _1 )
# 1010 "Parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'matched_if) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'matched_if) in
    Obj.repr(
# 275 "Parser.mly"
                                                                            ( If({cond=_3; ifstmt=_5; elsestmt=_7}) )
# 1019 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "Parser.mly"
                       ( () (*unit*) )
# 1025 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 277 "Parser.mly"
                                  ( Expr _1 )
# 1032 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : statement list) in
    Obj.repr(
# 278 "Parser.mly"
                                                     ( StmtList _2 )
# 1039 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'optional_for_label) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 282 "Parser.mly"
                                ( For({label=_1; initial=_4; cond=_6; update=_8; stmt=_10}) )
# 1050 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_label_semi) in
    Obj.repr(
# 284 "Parser.mly"
                                            ( JumpStmt({name=Continue; label=_2}) )
# 1057 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_label_semi) in
    Obj.repr(
# 285 "Parser.mly"
                                         ( JumpStmt({name=Break; label=_2}) )
# 1064 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 286 "Parser.mly"
                                                    ( Return _2 )
# 1071 "Parser.ml"
               : 'matched_if))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 291 "Parser.mly"
                                                           ( If({cond=_3; ifstmt=_5; elsestmt=()}) )
# 1079 "Parser.ml"
               : 'unmatched_if))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'matched_if) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'unmatched_if) in
    Obj.repr(
# 292 "Parser.mly"
                                                                                ( If({cond=_3; ifstmt=_5; elsestmt=_7}) )
# 1088 "Parser.ml"
               : 'unmatched_if))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 295 "Parser.mly"
                  ( ident _1 )
# 1095 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 296 "Parser.mly"
                                          ( _2 )
# 1102 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    Obj.repr(
# 297 "Parser.mly"
                                     ( () )
# 1109 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "Parser.mly"
                    ( Bool true )
# 1115 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "Parser.mly"
                     ( Bool false )
# 1121 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "Parser.mly"
                    ( () )
# 1127 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 301 "Parser.mly"
                        ( Int _1 )
# 1134 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 302 "Parser.mly"
                         ( Var _1 )
# 1141 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 303 "Parser.mly"
                           ( Float _1 )
# 1148 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 304 "Parser.mly"
                             ( String _1 )
# 1155 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 305 "Parser.mly"
                                    ( FuncCall (_1,[]) )
# 1162 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 306 "Parser.mly"
                                                    ( FuncCall (_1,_3) )
# 1170 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 307 "Parser.mly"
                                                         ( Array (_1,_3) )
# 1178 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 308 "Parser.mly"
                              ( _1 )
# 1185 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_expression) in
    Obj.repr(
# 309 "Parser.mly"
                               ( _1 )
# 1192 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_assignment) in
    Obj.repr(
# 310 "Parser.mly"
                              ( _1 )
# 1199 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_assignment) in
    Obj.repr(
# 311 "Parser.mly"
                               ( _1 )
# 1206 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 312 "Parser.mly"
                                                                ( () )
# 1214 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 313 "Parser.mly"
                                                         ( InlineIf (_1,_3,_5) )
# 1223 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optional_new) in
    Obj.repr(
# 314 "Parser.mly"
                                      ( () )
# 1231 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 315 "Parser.mly"
                                 ( () )
# 1238 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 323 "Parser.mly"
                                                                    ( UnaryExpr(BitAnd,_2) )
# 1245 "Parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 324 "Parser.mly"
                                                                    ( UnaryExpr(UTimes,_2) )
# 1252 "Parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 325 "Parser.mly"
                                                                    ( UnaryExpr(UPlus,_2)  )
# 1259 "Parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 326 "Parser.mly"
                                                                    ( UnaryExpr(UMinus,_2) )
# 1266 "Parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 327 "Parser.mly"
                                                                    ( UnaryExpr(BitNot,_2) )
# 1273 "Parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 330 "Parser.mly"
                                                  ( BinExpr(Times,_1,_3) )
# 1281 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 331 "Parser.mly"
                                                  ( BinExpr(Div,_1,_3)   )
# 1289 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 332 "Parser.mly"
                                                  ( BinExpr(Mod,_1,_3)   )
# 1297 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 333 "Parser.mly"
                                                  ( BinExpr(Plus,_1,_3)  )
# 1305 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 334 "Parser.mly"
                                                  ( BinExpr(Minus,_1,_3) )
# 1313 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 335 "Parser.mly"
                                                  ( BinExpr(Lt,_1,_3)    )
# 1321 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 336 "Parser.mly"
                                                  ( BinExpr(Gt,_1,_3)    )
# 1329 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 337 "Parser.mly"
                                                  ( BinExpr(Le,_1,_3)    )
# 1337 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 338 "Parser.mly"
                                                  ( BinExpr(Ge,_1,_3)    )
# 1345 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 339 "Parser.mly"
                                                  ( BinExpr(Eq,_1,_3)    )
# 1353 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 340 "Parser.mly"
                                                  ( BinExpr(Neq,_1,_3)   )
# 1361 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 341 "Parser.mly"
                                                  ( BinExpr(And,_1,_3)   )
# 1369 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 342 "Parser.mly"
                                                  ( BinExpr(Or,_1,_3)    )
# 1377 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 343 "Parser.mly"
                                                  ( BinExpr(Comma,_1,_3) )
# 1385 "Parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 346 "Parser.mly"
                                                        ( UnaryAssign(PrePlusPlus,_2)    )
# 1392 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 347 "Parser.mly"
                                                        ( UnaryAssign(PreMinusMinus,_2)  )
# 1399 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 348 "Parser.mly"
                                                        ( UnaryAssign(PostPlusPlus,_1)   )
# 1406 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 349 "Parser.mly"
                                                        ( UnaryAssign(PostMinusMinus,_1) )
# 1413 "Parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 352 "Parser.mly"
                                                    ( BinAssign(Assign, _1, _3)  )
# 1421 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 353 "Parser.mly"
                                                    ( BinAssign(TimesEq, _1, _3) )
# 1429 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 354 "Parser.mly"
                                                    ( BinAssign(DivEq, _1, _3)   )
# 1437 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 355 "Parser.mly"
                                                    ( BinAssign(ModEq, _1, _3)   )
# 1445 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 356 "Parser.mly"
                                                    ( BinAssign(PlusEq, _1, _3)  )
# 1453 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 357 "Parser.mly"
                                                    ( BinAssign(MinusEq, _1, _3) )
# 1461 "Parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 366 "Parser.mly"
                                              ( () )
# 1467 "Parser.ml"
               : 'optional_new))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 367 "Parser.mly"
                                                ( () )
# 1474 "Parser.ml"
               : 'optional_new))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 370 "Parser.mly"
                                 ( _1 )
# 1481 "Parser.ml"
               : 'constant_expression))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
